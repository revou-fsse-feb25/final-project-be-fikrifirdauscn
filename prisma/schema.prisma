// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(USER) 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Event {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  date        DateTime
  location    String
  artist      String
  price       Float
  totalTickets Int
  availableTickets Int
  imageUrl    String? 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  bookings    Booking[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  events    Event[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     String
  numberOfTickets Int
  totalPrice  Float
  bookingDate DateTime  @default(now())
  status      BookingStatus @default(CONFIRMED) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELED
}
